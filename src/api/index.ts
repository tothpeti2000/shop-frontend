/**
 * Generated by orval v6.10.0 üç∫
 * Do not edit manually.
 * Shop API
 * OpenAPI spec version: v1
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError
} from 'axios'
import {
  useQuery,
  useMutation
} from 'react-query'
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey
} from 'react-query'
import type {
  RegisterUserCommand,
  LoginUserResponse,
  LoginUserRequest,
  GetAllProductsResponse,
  GetProductByIdResponse
} from '../models'



export const postapiAuthregisterundefined = (
    registerUserCommand: RegisterUserCommand, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.post(
      `/api/Auth/register`,
      registerUserCommand,options
    );
  }



    export type PostapiAuthregisterundefinedMutationResult = NonNullable<Awaited<ReturnType<typeof postapiAuthregisterundefined>>>
    export type PostapiAuthregisterundefinedMutationBody = RegisterUserCommand
    export type PostapiAuthregisterundefinedMutationError = AxiosError<unknown>

    export const usePostapiAuthregisterundefined = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postapiAuthregisterundefined>>, TError,{data: RegisterUserCommand}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postapiAuthregisterundefined>>, {data: RegisterUserCommand}> = (props) => {
          const {data} = props ?? {};

          return  postapiAuthregisterundefined(data,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof postapiAuthregisterundefined>>, TError, {data: RegisterUserCommand}, TContext>(mutationFn, mutationOptions)
    }
    
export const postapiAuthloginundefined = (
    loginUserRequest: LoginUserRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<LoginUserResponse>> => {
    return axios.post(
      `/api/Auth/login`,
      loginUserRequest,options
    );
  }



    export type PostapiAuthloginundefinedMutationResult = NonNullable<Awaited<ReturnType<typeof postapiAuthloginundefined>>>
    export type PostapiAuthloginundefinedMutationBody = LoginUserRequest
    export type PostapiAuthloginundefinedMutationError = AxiosError<unknown>

    export const usePostapiAuthloginundefined = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postapiAuthloginundefined>>, TError,{data: LoginUserRequest}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postapiAuthloginundefined>>, {data: LoginUserRequest}> = (props) => {
          const {data} = props ?? {};

          return  postapiAuthloginundefined(data,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof postapiAuthloginundefined>>, TError, {data: LoginUserRequest}, TContext>(mutationFn, mutationOptions)
    }
    
export const getapiProductsundefined = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetAllProductsResponse>> => {
    return axios.get(
      `/api/Products`,options
    );
  }


export const getGetapiProductsundefinedQueryKey = () => [`/api/Products`];

    
export type GetapiProductsundefinedQueryResult = NonNullable<Awaited<ReturnType<typeof getapiProductsundefined>>>
export type GetapiProductsundefinedQueryError = AxiosError<unknown>

export const useGetapiProductsundefined = <TData = Awaited<ReturnType<typeof getapiProductsundefined>>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getapiProductsundefined>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetapiProductsundefinedQueryKey();

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getapiProductsundefined>>> = ({ signal }) => getapiProductsundefined({ signal, ...axiosOptions });

  const query = useQuery<Awaited<ReturnType<typeof getapiProductsundefined>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


export const getapiProductsidundefined = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetProductByIdResponse>> => {
    return axios.get(
      `/api/Products/${id}`,options
    );
  }


export const getGetapiProductsidundefinedQueryKey = (id: string,) => [`/api/Products/${id}`];

    
export type GetapiProductsidundefinedQueryResult = NonNullable<Awaited<ReturnType<typeof getapiProductsidundefined>>>
export type GetapiProductsidundefinedQueryError = AxiosError<unknown>

export const useGetapiProductsidundefined = <TData = Awaited<ReturnType<typeof getapiProductsidundefined>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getapiProductsidundefined>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetapiProductsidundefinedQueryKey(id);

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getapiProductsidundefined>>> = ({ signal }) => getapiProductsidundefined(id, { signal, ...axiosOptions });

  const query = useQuery<Awaited<ReturnType<typeof getapiProductsidundefined>>, TError, TData>(queryKey, queryFn, {enabled: !!(id), ...queryOptions}) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


